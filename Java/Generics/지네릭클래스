지네릭 타입은 클래스와 메서드 선언 가능.
Ex) class KHM<T> // 지네릭 타입 T 선언 
<T> -> 타입변수 (type variable) 등으로 사용 가능하며
<E> -> 요소 (Element)
<K> -> 키 (Key)
<V> -> 값 (Value)
등으로 의미있는 문자를 택하여 사용하자.

기호의 종류만 다르지 '임의의 참조형 타입'을 의미한다.

지네릭 클래스 선언
class KHM<T>{
	T name;
	void setname(T name) {
		this.name = name;}
	T getName() {
	return name; 
	}
}


지네릭 클래스의 객체 생성
KHM<String> k = new KHM<String>(); // 타입 T 대신, 실제 타입 지정
k.setName(new Object()); // 에러, String 이외 타입 지정 불가.
k.setName("KHMBABO"); // OK, String 타입이므로 가능.
String name = k.getName(); // 형변환 필요 X

지네릭 도입 전 코드와의 호환을 위해, 지네릭 클래스여도 객체 생성을 허용한다.
다만 지네릭 타입을 지정하지 않아 안전하지 않다는 경고 발생.
KHM k = new KHM(); // OK. T == Object
k.setName("KHMHKHKHMHM"); // unchecked or unsafe operation

KHM<Object> k = neww KHM<Object>();
k.setName("KHM"); // 경고 발생 X
k.setName(new Object()); //경고 발생 X

지네릭스 도입 전 코드와 호환성 유지를 위해 허용 할 뿐, 지네릭 클래스를 사용할 때는 타입 지정을 권고한다.

