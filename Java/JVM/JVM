JVM(Java Virtual Machine)이란 ?

자바 가상 머신 JVM (Java Virtual Machine)은 자바 프로그램 실행 환경을 만들어 주는 소프트웨어
자바 코드 컴파일 -> .class 바이트 코드로 만들면 JVM 환경에서 실행. JVM은 JRE에 포함되어 있음.
즉, 현재 사용하는 컴퓨터의 운영체제에 맞는 JRE가 설치되어 있으면 JVM이 설치되어 있다는 것.

JVM의 이점

하나의 바이트 코드(.class)로 모든 플랫폼에서 동일하게 동작 
class 파일은 바이트 코드, 사람이 쓰는 자바 코드에서 컴퓨터가 읽는 기계어로의 중간 단계

하지만 JVM은 플랫폼에 종속적이다.
ex) 리눅스의 JVM과 윈도우의 JVM은 다르다.

바이트 코드를 읽는 방식

JVM은 바이트코드를 명령어 단위로 읽어서 해석
Interpreter방식과 JIT 방식 두 가지 혼합

Interpreter -> 바이트코드를 한 줄씩 해석, 실행하는 방식
초기 방식으로, 속도가 느리다는 단점이 있다.

JIT -> 바이트코드를 JIT 컴파일, 프로그램 실행 시점에 OS에 맞는 Native Code로 변환하여 실행
바이트 코드를 Native Code로 변환하는 비용 소요되어 인터프리터에서 일정 기준을 넘을 시 JIT 컴파일로 실행.


JVM은 JIT(Just In Time) 컴파일러라고도 한다.
JIT 컴파일러는 같은 코드를 매번 해석하지 않고
실행 시점에서 해당 코드를 캐싱한다. 이후 바뀐 부분만 컴파일하고
캐싱된 코드를 사용한다. 이러한 방법을 채택하여 Interpreter 방식보다 성능이 10 ~ 20배 높다.


JIT의 장 단점 

장점 : Interpreter 방식보다 성능이 월등히 좋다.
       필요한 시점에 필요한 만큼 적시 컴파일이 가능하다.

단점 : 초기 실행 속도가 느리며 메모리 사용량이 높다.


JVM의 동작 방식

1. 자바로 개발된 프로그램 실행 시 JVM은 OS로 부터 메모리 할당
2. 자바 컴파일러(javac)가 자바 소스코드(.java)를 자바 바이트코드(.class)로 컴파일
3. Class Loader를 통해 JVM Runtime Data Area로 로딩
4. Runtime Data Area에 로딩된 .class들은 Execution Engine을 통해 해석
5. 해석된 바이트코드는 RunTime Data Area의 각 영역에 배치되어 수행,이 과정에서 Execution Engine에 의해 GC의 작동과 스레드 동기화	